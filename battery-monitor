#!/usr/bin/env bash
# Author: Pooya Moradi
# Date : 2022-08-27
# License: MIT
#
# Description: plot power consumption of batteries of the laptop.
# Dependencies: feedgnuplot, yad, awk

# enforce run of only a single instance of the script
lockfile="${TMPDIR:-/tmp}/battery-monitor.lock"
if ! mkdir -- "$lockfile"; then
    printf >&2 "[ERROR] another instance is running.\n"
    exit 1
fi

version=0.4
period="1"
window="30"
gnuplot_terminal="qt font 'monospace,10'"
# gnuplot_terminal="x11 font 'Inconsolata,10'"

show_help() {
    cat << EOF
Usage: battery-monitor [-t PERIOD] [-w WIDTH] [-V] [-h]
DESCRIPTION
    Plot power consumption [Watt] of batteries

OPTIONS
    [-t PERIOD] :
        Sampling period in seconds
        Default: 1
    [-w WIDTH] :
        Graph window width in seconds
        Default: 30
    [-V] :
        Print version
    [-h] :
        Display the help message

EXAMPLES
    # graph power consumption wattage for sampling period of 0.5 seconds and
    # window of 4 seconds
    battery-monitor -t 0.5 -w 4
EOF
}

cleanup() {
    if [[ -e /dev/fd/3 ]]; then
        printf "quit\n" >&3
        exec >&3-
    fi
    rm -rf -- "$lockfile"
    trap '' SIGTERM
    pkill -P $$
}
trap "cleanup" EXIT

check_deps() {
    local err=0
    for app in "$@"; do
        if ! command -v "$app" &> /dev/null; then
            printf >&2 "[ERROR] dependency '%s' not found.\n" "$app"
            err=1
        fi
    done
    return "$err"
}

get_battery_powers() {
    if ((step == 0)); then
        batteries=$(find /sys/class/power_supply/ -iname "BAT[0-9]*" -printf "%f\n")
        if [[ -z "$batteries" ]]; then
            printf >&2 "[ERROR] Can't find active batteries.\n"
            return 1
        fi
        printf "#%s %s\n" "Step" \
            "$(printf "%s" "$batteries" | tr '\n' ' ')"
        return
    fi
    cat /sys/class/power_supply/BAT*/power_now \
        | tr '\n' ' '
}

test_gen_data() {
    if ((step == 0)); then
        printf "#%s %s\n" "Step" "BAT0 BAT1 BAT2"
        return
    fi
    printf "%s %s %s\n" \
        "$(shuf -i 1000000-10000000 -n 1)" \
        "$(shuf -i 10000000-20000000 -n 1)" \
        "$(shuf -i 20000000-30000000 -n 1)"
}

while getopts t:w:Vh opt; do
    case $opt in
        h)
            show_help
            exit 0
            ;;
        V)
            printf "%s\n" "$version"
            exit 0
            ;;
        t)
            period="$OPTARG"
            ;;
        w)
            window="$OPTARG"
            ;;
        *)
            printf >&2 "[ERROR] Bad usage! Check help (-h)\n"
            exit 2
            ;;
    esac
done
shift "$((OPTIND - 1))"

# check dependencies
check_deps feedgnuplot yad || exit 1

# start yad notification tray
exec 3> >(yad --notification --no-middle --listen \
    --image="battery" --text="battery-monitor")
printf "%s|\n" \
    "menu:Quit!sh -c 'kill $$'!application-exit" \
    >&3

# produce data with cat and consume with feedgnuplot
step=0
while true; do
    # convert p1\np2 to p1,p2, then divide by 1e6 to convert to Watts
    line=$(get_battery_powers \
        | awk -F ' ' -v step="$step" \
            '{if (step == 0) print $0;
              else {
                   for(i=1; i<=NF; i++) $i=$i/1e6;
                   print step, $0 }
                }')
    printf "tooltip: %s\n" "$line" >&3
    printf "%s\n" "$line"
    sleep "$period"
    step=$((step + 1))
done \
    | feedgnuplot --vnlog --autolegend --domain \
        --stream "$period" --xlen "$window" \
        --lines --set "ylabel 'Power consumption [Watt]'" \
        --set 'key bottom left' \
        --styleall 'with lines linewidth 3' \
        --terminal "$gnuplot_terminal" \
        --exit
